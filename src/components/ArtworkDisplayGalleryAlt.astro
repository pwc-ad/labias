---
import { type GalleryMetadata } from '@/constants/artworks';
import ArtworkDisplayGalleryElement from './ArtworkDisplayGalleryElement.astro';

interface Props {
	metadata: GalleryMetadata;
}

const { metadata } = Astro.props;
const { images } = metadata;
const hasMultiple = images.length > 1;
---

<div
	class="absolute inset-0 flex justify-center h-full w-full overflow-hidden bg-black p-2"
>
	<div
		class="hide-scrollbar flex gap-2 h-full max-w-full snap-x snap-mandatory items-center overflow-x-auto scroll-smooth"
		data-gallery-slider
	>
		{
			images.map((image) => (
				<ArtworkDisplayGalleryElement 
					src={image.url}
					alt={image.alt}
					mode="slide"
					data-gallery-slide
				/>
			))
		}
	</div>
	{
		hasMultiple && (
			<button
				type="button"
				aria-label="Next"
				class="absolute top-0 bottom-0 right-0 w-1/4 cursor-pointer pointer-events-none"
				data-gallery-next
			>
			</button>
			<button
				type="button"
				aria-label="Previous"
				class="absolute top-0 bottom-0 left-0 w-1/4 cursor-pointer pointer-events-none"
				data-gallery-prev
			>
			</button>
		)
	}
</div>
<script>
	(() => {
		const slider = document.querySelector('[data-gallery-slider]');
		const slides = slider?.querySelectorAll('[data-gallery-slide]');
		if (!slider || !slides?.length) return;
	
		const nextButton = document.querySelector('[data-gallery-next]');
		const prevButton = document.querySelector('[data-gallery-prev]');

		const totalSlides = slides.length;
		let currentIndex = 0;

		const toggleButtonDisabledState = (force?: boolean) => {
			nextButton?.classList.toggle('pointer-events-none', force || currentIndex >= totalSlides - 1);
			prevButton?.classList.toggle('pointer-events-none', force || currentIndex <= 0);
		};
		toggleButtonDisabledState();

		const updateScrollPosition = () => {
			const slideWidth = slider.clientWidth;
			slider.scrollTo({
				left: currentIndex * slideWidth,
				behavior: 'smooth',
			})
			toggleButtonDisabledState(true);
			slider.addEventListener('scrollend', () => {
				toggleButtonDisabledState(false);
			}, { once: true });
		}
	
		nextButton?.addEventListener('click', () => {
			if (currentIndex >= totalSlides - 1) return;
			currentIndex++;
			updateScrollPosition();
		});

		prevButton?.addEventListener('click', () => {
			if (currentIndex <= 0) return;
			currentIndex--;
			updateScrollPosition();
		});
	})()
</script>
<style>
	.hide-scrollbar::-webkit-scrollbar {
		display: none;
	}
	.hide-scrollbar {
		-ms-overflow-style: none;
		scrollbar-width: none;
	}
</style>
